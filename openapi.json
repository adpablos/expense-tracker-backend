{
  "openapi": "3.0.0",
  "info": {
    "title": "Expense Tracker API",
    "version": "1.0.0",
    "description": "The Expense Tracker API provides endpoints for managing your personal finances. With this API, you can manage expenses, categories, and subcategories, as well as upload receipts and audio logs. A key feature of the API is the use of AI to process uploaded documents (images or audio files) to automatically recognize and log expenses, enhancing the user experience by simplifying data entry.\n\nAuthentication:\nThis API uses OAuth 2.0 with JWT tokens for authentication. To use the API from Swagger UI:\n\n1. Click on the \"Authorize\" button at the top of this page.\n2. In the \"Value\" field, enter your JWT token in the format: Bearer <your_token>\n3. Click \"Authorize\" to apply the token to all endpoints.\n\nFor development purposes, you can use the /auth-help/generate-token endpoint to generate a token."
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication related endpoints"
    },
    {
      "name": "Users",
      "description": "Endpoints for managing users"
    },
    {
      "name": "Households",
      "description": "Endpoints for managing households"
    },
    {
      "name": "Categories",
      "description": "Endpoints for managing expense categories"
    },
    {
      "name": "Subcategories",
      "description": "Endpoints for managing expense subcategories"
    },
    {
      "name": "Expenses",
      "description": "Endpoints for managing expenses"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the category"
          },
          "name": {
            "type": "string",
            "description": "The name of the category"
          },
          "householdId": {
            "type": "string",
            "description": "The ID of the household this category belongs to"
          }
        }
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the subcategory"
          },
          "name": {
            "type": "string",
            "description": "The name of the subcategory"
          },
          "categoryId": {
            "type": "string",
            "description": "The ID of the parent category"
          },
          "householdId": {
            "type": "string",
            "description": "The ID of the household this subcategory belongs to"
          }
        }
      },
      "Expense": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the expense"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the expense"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the expense"
          },
          "category": {
            "type": "string",
            "description": "The category of the expense"
          },
          "subcategory": {
            "type": "string",
            "description": "The subcategory of the expense"
          },
          "expenseDatetime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the expense occurred"
          },
          "householdId": {
            "type": "string",
            "description": "The ID of the household this expense belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the expense was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the expense was last updated"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user"
          },
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "authProviderId": {
            "type": "string",
            "description": "The ID provided by the authentication provider"
          },
          "households": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of household IDs the user belongs to"
          }
        }
      },
      "Household": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the household"
          },
          "name": {
            "type": "string",
            "description": "The name of the household"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the household was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the household was last updated"
          }
        }
      },
      "HouseholdMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the household member relationship"
          },
          "householdId": {
            "type": "string",
            "description": "The ID of the household"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user"
          },
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "member"
            ],
            "description": "The role of the user in the household"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "invited",
              "removed"
            ],
            "description": "The status of the user in the household"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the member was added to the household"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the member's status was last updated"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth-help/get-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Get an authentication token",
        "description": "For development purposes only. Obtains a token from Auth0.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token obtained successfully"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "summary": "Retrieve all categories",
        "tags": [
          "Categories"
        ],
        "description": "Fetches a comprehensive list of all available expense categories for the specified household or the user's default household.\nCategories are used to organize expenses at a high level.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to fetch categories for. If not provided, the user's default household will be used."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid household ID or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "500": {
            "description": "Server error - failed to retrieve categories"
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "tags": [
          "Categories"
        ],
        "description": "Adds a new category to organize expenses within a specific household or the user's default household.\nEach category must have a unique name within the household.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to create the category in. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the category (must be unique within the household)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input, duplicate category name, or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "500": {
            "description": "Server error - failed to create category"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "put": {
        "summary": "Update an existing category",
        "tags": [
          "Categories"
        ],
        "description": "Modifies the details of an existing category by its ID within a specific household or the user's default household.\nOnly the name of the category can be changed.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the category to update"
          },
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household the category belongs to. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name for the category (must be unique within the household)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input, duplicate category name, or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Category not found - the specified category does not exist in the household"
          },
          "500": {
            "description": "Server error - failed to update category"
          }
        }
      },
      "delete": {
        "summary": "Delete a category",
        "tags": [
          "Categories"
        ],
        "description": "Removes an existing category by its ID from a specific household or the user's default household.\nIf the category has subcategories, they will also be deleted if `force=true` is provided.\nNote: This action cannot be undone. All expenses associated with this category (and its subcategories, if deleted) will have their category set to null.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the category to delete"
          },
          {
            "in": "query",
            "name": "force",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If set to `true`, all associated subcategories will be deleted along with the category"
          },
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household the category belongs to. If not provided, the user's default household will be used."
          }
        ],
        "responses": {
          "204": {
            "description": "Category successfully deleted"
          },
          "400": {
            "description": "Bad request - category has subcategories and force is not true, or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Category not found - the specified category does not exist in the household"
          },
          "500": {
            "description": "Server error - failed to delete category"
          }
        }
      }
    },
    "/api/expenses": {
      "get": {
        "summary": "Retrieve all expenses",
        "tags": [
          "Expenses"
        ],
        "description": "Fetches a detailed list of all recorded expenses for the specified household or the user's default household.\nSupports pagination and various filter options to narrow down the results.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to fetch expenses for. If not provided, the user's default household will be used."
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The start date to filter expenses (inclusive, ISO 8601 format)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The end date to filter expenses (inclusive, ISO 8601 format)"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter expenses by category name"
          },
          {
            "in": "query",
            "name": "subcategory",
            "schema": {
              "type": "string"
            },
            "description": "Filter expenses by subcategory name"
          },
          {
            "in": "query",
            "name": "amount",
            "schema": {
              "type": "number"
            },
            "description": "Filter expenses by exact amount"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Filter expenses by description (partial match)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "The number of expenses per page"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of expenses with pagination details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expenses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Expense"
                      }
                    },
                    "page": {
                      "type": "integer"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalItems": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid query parameters or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "500": {
            "description": "Server error - failed to retrieve expenses"
          }
        }
      },
      "post": {
        "summary": "Add a new expense",
        "tags": [
          "Expenses"
        ],
        "description": "Adds a new expense to the system for the specified household or the user's default household.\nThe expense must be associated with a valid category and subcategory.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to add the expense to. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "description",
                  "amount",
                  "category",
                  "subcategory",
                  "expenseDatetime"
                ],
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A brief description of the expense"
                  },
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "description": "The amount of the expense (must be positive)"
                  },
                  "category": {
                    "type": "string",
                    "description": "The name of the category for this expense"
                  },
                  "subcategory": {
                    "type": "string",
                    "description": "The name of the subcategory for this expense"
                  },
                  "expenseDatetime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the expense occurred (ISO 8601 format)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expense successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Not found - specified category or subcategory does not exist"
          },
          "500": {
            "description": "Server error - failed to create expense"
          }
        }
      }
    },
    "/api/expenses/{id}": {
      "put": {
        "summary": "Update an existing expense",
        "tags": [
          "Expenses"
        ],
        "description": "Updates the details of an existing expense by its ID within a specific household or the user's default household.\nAll fields of the expense can be modified.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the expense to update"
          },
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household the expense belongs to. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A brief description of the expense"
                  },
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "description": "The amount of the expense (must be positive)"
                  },
                  "category": {
                    "type": "string",
                    "description": "The name of the category for this expense"
                  },
                  "subcategory": {
                    "type": "string",
                    "description": "The name of the subcategory for this expense"
                  },
                  "expenseDatetime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the expense occurred (ISO 8601 format)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expense successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Not found - the specified expense, category, or subcategory does not exist"
          },
          "500": {
            "description": "Server error - failed to update expense"
          }
        }
      },
      "delete": {
        "summary": "Delete an expense",
        "tags": [
          "Expenses"
        ],
        "description": "Removes an existing expense by its ID from a specific household or the user's default household.\nThis action cannot be undone.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the expense to delete"
          },
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household the expense belongs to. If not provided, the user's default household will be used."
          }
        ],
        "responses": {
          "204": {
            "description": "Expense successfully deleted"
          },
          "400": {
            "description": "Bad request - invalid expense ID or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Not found - the specified expense does not exist in the household"
          },
          "500": {
            "description": "Server error - failed to delete expense"
          }
        }
      }
    },
    "/api/expenses/upload": {
      "post": {
        "summary": "Upload and process an expense file",
        "tags": [
          "Expenses"
        ],
        "description": "Uploads an image or audio file to create a new expense entry using AI processing.\nThe file should be either an image (jpeg, jpg, png, webp, gif) or audio (flac, m4a, mp3, mp4, mpeg, mpga, oga, ogg, wav, webm).\nThe AI processes the uploaded file to automatically recognize and log the expense details, making data entry quick and effortless.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to add the expense to. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image or audio file to upload and process"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expense successfully logged by AI",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Expense logged successfully."
                    },
                    "expense": {
                      "$ref": "#/components/schemas/Expense"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no file uploaded, unsupported file type, or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "422": {
            "description": "Unprocessable Entity - file was processed but no valid expense could be identified"
          },
          "500": {
            "description": "Server error - failed to process the file or create the expense"
          }
        }
      }
    },
    "/api/households": {
      "post": {
        "summary": "Create a new household",
        "tags": [
          "Households"
        ],
        "description": "Creates a new household and automatically adds the current user as the owner.\nEach user can be the owner of multiple households.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the household (must be unique for the user)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Household successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Household"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data (e.g., name is empty)"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "409": {
            "description": "Conflict - a household with this name already exists for the user"
          },
          "500": {
            "description": "Internal server error - failed to create household"
          }
        }
      }
    },
    "/api/households/{householdId}/invite": {
      "post": {
        "summary": "Invite a user to join a household",
        "tags": [
          "Households"
        ],
        "description": "Sends an invitation to a user to join the specified household.\nOnly the household owner can send invitations.\nThe invited user will need to accept the invitation to join the household.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "householdId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the household to invite the user to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "invitedUserId"
                ],
                "properties": {
                  "invitedUserId": {
                    "type": "string",
                    "description": "The ID of the user to invite"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation sent successfully"
          },
          "400": {
            "description": "Bad request - invalid input data or user is already a member"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not the household owner"
          },
          "404": {
            "description": "Not found - household or invited user not found"
          },
          "500": {
            "description": "Internal server error - failed to send invitation"
          }
        }
      }
    },
    "/api/households/{householdId}/accept": {
      "post": {
        "summary": "Accept an invitation to join a household",
        "tags": [
          "Households"
        ],
        "description": "Accepts a pending invitation for the authenticated user to join the specified household.\nThe user must have a pending invitation to accept it.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "householdId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the household the user is accepting the invitation for"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation accepted successfully"
          },
          "400": {
            "description": "Bad request - user is already a member of the household"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "404": {
            "description": "Not found - household not found or no pending invitation exists"
          },
          "500": {
            "description": "Internal server error - failed to accept invitation"
          }
        }
      }
    },
    "/api/households/{householdId}/reject": {
      "post": {
        "summary": "Reject an invitation to join a household",
        "tags": [
          "Households"
        ],
        "description": "Rejects a pending invitation for the authenticated user to join the specified household.\nThe user must have a pending invitation to reject it.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "householdId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the household the user is rejecting the invitation for"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation rejected successfully"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "404": {
            "description": "Not found - household not found or no pending invitation exists"
          },
          "500": {
            "description": "Internal server error - failed to reject invitation"
          }
        }
      }
    },
    "/api/households/{householdId}/members": {
      "get": {
        "summary": "Get all members of a household",
        "tags": [
          "Households"
        ],
        "description": "Retrieves a list of all members in the specified household.\nThe authenticated user must be a member of the household to access this information.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "householdId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the household to get members for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of household members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HouseholdMember"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not a member of the household"
          },
          "404": {
            "description": "Not found - household not found"
          },
          "500": {
            "description": "Internal server error - failed to retrieve household members"
          }
        }
      }
    },
    "/api/households/{householdId}/members/{userId}": {
      "delete": {
        "summary": "Remove a member from the household",
        "tags": [
          "Households"
        ],
        "description": "Removes a member from the specified household.\nOnly the household owner can remove members.\nThe owner cannot remove themselves from the household.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "householdId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the household to remove the member from"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to remove from the household"
          }
        ],
        "responses": {
          "200": {
            "description": "Member removed successfully"
          },
          "400": {
            "description": "Bad request - attempt to remove the owner or last member"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not the household owner"
          },
          "404": {
            "description": "Not found - household or member not found"
          },
          "500": {
            "description": "Internal server error - failed to remove member"
          }
        }
      }
    },
    "/api/subcategories": {
      "get": {
        "summary": "Retrieve all subcategories",
        "tags": [
          "Subcategories"
        ],
        "description": "Fetches a comprehensive list of all available expense subcategories for the specified household or the user's default household.\nSubcategories are used to further organize expenses within categories.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to fetch subcategories for. If not provided, the user's default household will be used."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subcategories successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subcategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid household ID or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "500": {
            "description": "Server error - failed to retrieve subcategories"
          }
        }
      },
      "post": {
        "summary": "Create a new subcategory",
        "tags": [
          "Subcategories"
        ],
        "description": "Adds a new subcategory to organize expenses under a specific category within a household or the user's default household.\nEach subcategory must have a unique name within its parent category in the household.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household to create the subcategory in. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "categoryId"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the subcategory (must be unique within the category in the household)"
                  },
                  "categoryId": {
                    "type": "string",
                    "description": "The ID of the parent category for this subcategory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subcategory successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subcategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input, duplicate subcategory name, invalid category ID, or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Not found - the specified parent category does not exist"
          },
          "500": {
            "description": "Server error - failed to create subcategory"
          }
        }
      }
    },
    "/api/subcategories/{id}": {
      "put": {
        "summary": "Update an existing subcategory",
        "tags": [
          "Subcategories"
        ],
        "description": "Modifies the details of an existing subcategory by its ID within a specific household or the user's default household.\nThe name of the subcategory and its parent category can be changed.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the subcategory to update"
          },
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household the subcategory belongs to. If not provided, the user's default household will be used."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name for the subcategory (must be unique within the category in the household)"
                  },
                  "categoryId": {
                    "type": "string",
                    "description": "The ID of the new parent category for this subcategory (if changing categories)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subcategory successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subcategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input, duplicate subcategory name, invalid category ID, or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Not found - the specified subcategory or new parent category does not exist"
          },
          "500": {
            "description": "Server error - failed to update subcategory"
          }
        }
      },
      "delete": {
        "summary": "Delete a subcategory",
        "tags": [
          "Subcategories"
        ],
        "description": "Removes an existing subcategory by its ID from a specific household or the user's default household.\nNote: This action cannot be undone. All expenses associated with this subcategory will have their subcategory set to null.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique ID of the subcategory to delete"
          },
          {
            "in": "header",
            "name": "X-Household-Id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The ID of the household the subcategory belongs to. If not provided, the user's default household will be used."
          }
        ],
        "responses": {
          "204": {
            "description": "Subcategory successfully deleted"
          },
          "400": {
            "description": "Bad request - invalid subcategory ID or no default household found"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have access to the specified household"
          },
          "404": {
            "description": "Not found - the specified subcategory does not exist in the household"
          },
          "500": {
            "description": "Server error - failed to delete subcategory"
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Users"
        ],
        "description": "Creates a new user in the database after they've been registered in Auth0.\nThis endpoint should be called right after a successful registration with the authentication provider.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "auth_provider_id",
                  "email",
                  "name"
                ],
                "properties": {
                  "auth_provider_id": {
                    "type": "string",
                    "description": "The unique identifier provided by Auth0 for this user"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address"
                  },
                  "name": {
                    "type": "string",
                    "description": "The user's full name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input - please check the request body"
          },
          "409": {
            "description": "Conflict - a user with this email or auth_provider_id already exists"
          },
          "500": {
            "description": "Server error - failed to create user"
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "summary": "Get current user profile",
        "tags": [
          "Users"
        ],
        "description": "Retrieves the profile of the currently authenticated user.\nThis includes basic user information and a list of households they belong to.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "404": {
            "description": "User not found - the authenticated user no longer exists in the database"
          },
          "500": {
            "description": "Server error - failed to retrieve user profile"
          }
        }
      },
      "put": {
        "summary": "Update current user profile",
        "tags": [
          "Users"
        ],
        "description": "Updates the profile of the currently authenticated user.\nOnly certain fields can be updated (e.g., name, email).\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The new email address for the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name for the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input - please check the request body"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "404": {
            "description": "User not found - the authenticated user no longer exists in the database"
          },
          "409": {
            "description": "Conflict - the new email address is already in use"
          },
          "500": {
            "description": "Server error - failed to update user profile"
          }
        }
      },
      "delete": {
        "summary": "Delete current user account",
        "tags": [
          "Users"
        ],
        "description": "Deletes the account of the currently authenticated user. This action cannot be undone.\nThe process includes:\n1. Removing the user from all households they belong to.\n2. Transferring ownership of any households they own to another member (if possible).\n3. Deleting any households where they were the sole member.\n4. Deleting all personal data associated with the user.\nNote: This does not delete the user's account from the authentication provider (e.g., Auth0).\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User account successfully deleted"
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "404": {
            "description": "User not found - the authenticated user no longer exists in the database"
          },
          "500": {
            "description": "Server error - failed to delete user account"
          }
        }
      }
    },
    "/api/users/me/households": {
      "get": {
        "summary": "Get user's households",
        "tags": [
          "Users"
        ],
        "description": "Retrieves all households associated with the currently authenticated user.\nThis includes households where the user is an owner or a member.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User's households successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Household"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated"
          },
          "500": {
            "description": "Server error - failed to retrieve user's households"
          }
        }
      }
    }
  }
}